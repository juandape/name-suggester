// Tipo para el contexto de archivo
export interface FileContext {
  context: string;
  imports: string[];
  headerComments: string;
}

// Tipo para los resultados de análisis
export interface AnalyzeItem {
  type: string;
  name: string;
  line?: number;
  context?: string;
}

// Tipo para el log de sugerencias
export interface SuggestionLogEntry {
  filePath: string;
  item: AnalyzeItem;
  suggestions: string[];
  selected: string;
  fileContext: FileContext;
}
// Clase para mostrar progreso en la consola
export class ProgressBar {
  total: number;
  current: number;
  prefix: string;
  suffix: string;
  length: number;
  lastRender: number;
  isActive: boolean;
  startTime: number;

  constructor(
    total: number,
    prefix = 'Progreso:',
    suffix = 'Completado',
    length = 30
  ) {
    this.total = total;
    this.current = 0;
    this.prefix = prefix;
    this.suffix = suffix;
    this.length = length;
    this.lastRender = 0;
    this.isActive = false;
    this.start();
  }

  start() {
    this.startTime = Date.now();
    this.isActive = true;
    this.update(0);
  }

  update(current: number) {
    const now = Date.now();
    if (now - this.lastRender < 100 && current !== this.total && current !== 0)
      return;
    this.lastRender = now;
    this.current = current;
    process.stdout.write('\x1b[2K');
    const percent = (current / this.total) * 100;
    const filledLength = Math.round((this.length * current) / this.total);
    const bar =
      '■'.repeat(filledLength) + '□'.repeat(this.length - filledLength);
    const elapsedTime = now - this.startTime;
    const estimatedTotal =
      current > 0 ? (elapsedTime * this.total) / current : 0;
    const remainingTime = Math.max(0, estimatedTotal - elapsedTime);
    const timeStr =
      remainingTime > 0 && current < this.total
        ? ` (${Math.round(remainingTime / 1000)}s restantes)`
        : '';
    process.stdout.write(
      `\r${this.prefix} |${bar}| ${Math.floor(percent)}% ${
        this.suffix
      } ${current}/${this.total}${timeStr}`
    );
    if (current === this.total) {
      process.stdout.write('\n');
      this.isActive = false;
    }
  }

  complete() {
    if (this.isActive) {
      this.update(this.total);
    }
  }
}

// Types para contexto de archivo y resultados de análisis
export interface FileContext {
  context: string;
  imports: string[];
  headerComments: string;
}

export interface AnalyzeResult {
  type: string;
  name: string;
  line?: number;
  context?: string;
}
